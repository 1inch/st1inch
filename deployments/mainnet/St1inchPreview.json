{
  "address": "0x722E140f1222D404916B8d0A8Fd2F6233d446905",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract St1inch",
          "name": "st1INCH_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OriginInTheFuture",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "durationUntilMaxAllowedLoss",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "origin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "previewBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "previewPowerOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "previewPowerOfAtTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "previewUnlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowedExitTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "setDurationUntilMaxAllowedLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "st1INCH",
      "outputs": [
        {
          "internalType": "contract St1inch",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf727b51e7859267575f52f53b1fa9d9b78cd30072663ae7c5faa541468c585fa",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x722E140f1222D404916B8d0A8Fd2F6233d446905",
    "transactionIndex": 111,
    "gasUsed": "1570154",
    "logsBloom": "0x
    "blockHash": "0x1d5dbd2a3e96346a6d107891265e90405c8ae096ec08a296bd548dcf6669a922",
    "transactionHash": "0xf727b51e7859267575f52f53b1fa9d9b78cd30072663ae7c5faa541468c585fa",
    "logs": [
      {
        "transactionIndex": 111,
        "blockNumber": 16247790,
        "transactionHash": "0xf727b51e7859267575f52f53b1fa9d9b78cd30072663ae7c5faa541468c585fa",
        "address": "0x722E140f1222D404916B8d0A8Fd2F6233d446905",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 269,
        "blockHash": "0x1d5dbd2a3e96346a6d107891265e90405c8ae096ec08a296bd548dcf6669a922"
      }
    ],
    "blockNumber": 16247790,
    "cumulativeGasUsed": "12155380",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9A0C8Ff858d273f57072D714bca7411D717501D7"
  ],
  "numDeployments": 1,
  "solcInputHash": "8bca122d35e4c5967b2a4611c88a9091",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract St1inch\",\"name\":\"st1INCH_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OriginInTheFuture\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"durationUntilMaxAllowedLoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"previewBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"previewPowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"previewPowerOfAtTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"previewUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedExitTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setDurationUntilMaxAllowedLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"st1INCH\",\"outputs\":[{\"internalType\":\"contract St1inch\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/St1inchPreview.sol\":\"St1inchPreview\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@1inch/erc20-pods/contracts/ERC20Pods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Pods.sol\\\";\\nimport \\\"./interfaces/IPod.sol\\\";\\nimport \\\"./libs/ReentrancyGuard.sol\\\";\\n\\nabstract contract ERC20Pods is ERC20, IERC20Pods, ReentrancyGuardExt {\\n    using AddressSet for AddressSet.Data;\\n    using AddressArray for AddressArray.Data;\\n    using ReentrancyGuardLib for ReentrancyGuardLib.Data;\\n\\n    error PodAlreadyAdded();\\n    error PodNotFound();\\n    error InvalidPodAddress();\\n    error PodsLimitReachedForAccount();\\n    error InsufficientGas();\\n    error ZeroPodsLimit();\\n\\n    uint256 public immutable podsLimit;\\n    uint256 public immutable podCallGasLimit;\\n\\n    ReentrancyGuardLib.Data private _guard;\\n    mapping(address => AddressSet.Data) private _pods;\\n\\n    constructor(uint256 podsLimit_, uint256 podCallGasLimit_) {\\n        if (podsLimit_ == 0) revert ZeroPodsLimit();\\n        podsLimit = podsLimit_;\\n        podCallGasLimit = podCallGasLimit_;\\n        _guard.init();\\n    }\\n\\n    function hasPod(address account, address pod) public view virtual returns(bool) {\\n        return _pods[account].contains(pod);\\n    }\\n\\n    function podsCount(address account) public view virtual returns(uint256) {\\n        return _pods[account].length();\\n    }\\n\\n    function podAt(address account, uint256 index) public view virtual returns(address) {\\n        return _pods[account].at(index);\\n    }\\n\\n    function pods(address account) public view virtual returns(address[] memory) {\\n        return _pods[account].items.get();\\n    }\\n\\n    function balanceOf(address account) public nonReentrantView(_guard) view override(IERC20, ERC20) virtual returns(uint256) {\\n        return super.balanceOf(account);\\n    }\\n\\n    function podBalanceOf(address pod, address account) public nonReentrantView(_guard) view virtual returns(uint256) {\\n        if (hasPod(account, pod)) {\\n            return super.balanceOf(account);\\n        }\\n        return 0;\\n    }\\n\\n    function addPod(address pod) public virtual {\\n        _addPod(msg.sender, pod);\\n    }\\n\\n    function removePod(address pod) public virtual {\\n        _removePod(msg.sender, pod);\\n    }\\n\\n    function removeAllPods() public virtual {\\n        _removeAllPods(msg.sender);\\n    }\\n\\n    function _addPod(address account, address pod) internal virtual {\\n        if (pod == address(0)) revert InvalidPodAddress();\\n        if (!_pods[account].add(pod)) revert PodAlreadyAdded();\\n        if (_pods[account].length() > podsLimit) revert PodsLimitReachedForAccount();\\n\\n        emit PodAdded(account, pod);\\n        uint256 balance = balanceOf(account);\\n        if (balance > 0) {\\n            _updateBalances(pod, address(0), account, balance);\\n        }\\n    }\\n\\n    function _removePod(address account, address pod) internal virtual {\\n        if (!_pods[account].remove(pod)) revert PodNotFound();\\n\\n        emit PodRemoved(account, pod);\\n        uint256 balance = balanceOf(account);\\n        if (balance > 0) {\\n            _updateBalances(pod, account, address(0), balance);\\n        }\\n    }\\n\\n    function _removeAllPods(address account) internal virtual {\\n        address[] memory items = _pods[account].items.get();\\n        uint256 balance = balanceOf(account);\\n        unchecked {\\n            for (uint256 i = items.length; i > 0; i--) {\\n                _pods[account].remove(items[i - 1]);\\n                emit PodRemoved(account, items[i - 1]);\\n                if (balance > 0) {\\n                    _updateBalances(items[i - 1], account, address(0), balance);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Assembly implementation of the gas limited call to avoid return gas bomb,\\n    // moreover call to a destructed pod would also revert even inside try-catch block in Solidity 0.8.17\\n    /// @dev try IPod(pod).updateBalances{gas: _POD_CALL_GAS_LIMIT}(from, to, amount) {} catch {}\\n    function _updateBalances(address pod, address from, address to, uint256 amount) private {\\n        bytes4 selector = IPod.updateBalances.selector;\\n        bytes4 exception = InsufficientGas.selector;\\n        uint256 gasLimit = podCallGasLimit;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), from)\\n            mstore(add(ptr, 0x24), to)\\n            mstore(add(ptr, 0x44), amount)\\n\\n            if lt(div(mul(gas(), 63), 64), gasLimit) {\\n                mstore(0, exception)\\n                revert(0, 4)\\n            }\\n            pop(call(gasLimit, pod, 0, ptr, 0x64, 0, 0))\\n        }\\n    }\\n\\n    // ERC20 Overrides\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal nonReentrant(_guard) override virtual {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        unchecked {\\n            if (amount > 0 && from != to) {\\n                address[] memory a = _pods[from].items.get();\\n                address[] memory b = _pods[to].items.get();\\n                uint256 aLength = a.length;\\n                uint256 bLength = b.length;\\n\\n                for (uint256 i = 0; i < aLength; i++) {\\n                    address pod = a[i];\\n\\n                    uint256 j;\\n                    for (j = 0; j < bLength; j++) {\\n                        if (pod == b[j]) {\\n                            // Both parties are participating of the same Pod\\n                            _updateBalances(pod, from, to, amount);\\n                            b[j] = address(0);\\n                            break;\\n                        }\\n                    }\\n\\n                    if (j == bLength) {\\n                        // Sender is participating in a Pod, but receiver is not\\n                        _updateBalances(pod, from, address(0), amount);\\n                    }\\n                }\\n\\n                for (uint256 j = 0; j < bLength; j++) {\\n                    address pod = b[j];\\n                    if (pod != address(0)) {\\n                        // Receiver is participating in a Pod, but sender is not\\n                        _updateBalances(pod, address(0), to, amount);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca029b97ce35db3f3eda24efba7360d664ba36e52533fc394604c560252a7219\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/Pod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IPod.sol\\\";\\nimport \\\"./interfaces/IERC20Pods.sol\\\";\\n\\nabstract contract Pod is IPod {\\n    error AccessDenied();\\n\\n    IERC20Pods public immutable token;\\n\\n    modifier onlyToken {\\n        if (msg.sender != address(token)) revert AccessDenied();\\n        _;\\n    }\\n\\n    constructor(IERC20Pods token_) {\\n        token = token_;\\n    }\\n\\n    function updateBalances(address from, address to, uint256 amount) external onlyToken {\\n        _updateBalances(from, to, amount);\\n    }\\n\\n    function _updateBalances(address from, address to, uint256 amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x6275a7b899f4b9399e62dac6b0ae57195e347eb7879de76c36c0d92a22b13e57\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/interfaces/IERC20Pods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Pods is IERC20 {\\n    event PodAdded(address account, address pod);\\n    event PodRemoved(address account, address pod);\\n\\n    function hasPod(address account, address pod) external view returns(bool);\\n    function podsCount(address account) external view returns(uint256);\\n    function podAt(address account, uint256 index) external view returns(address);\\n    function pods(address account) external view returns(address[] memory);\\n    function podBalanceOf(address pod, address account) external view returns(uint256);\\n\\n    function addPod(address pod) external;\\n    function removePod(address pod) external;\\n    function removeAllPods() external;\\n}\\n\",\"keccak256\":\"0x67f80b12d4d74805fa78ac50a1b526818de3111e9861f82a8dd979f04a1d7ec0\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/interfaces/IPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPod {\\n    function updateBalances(address from, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x66c7e29ad8c4633351431ba650e6a198b30f1c1091ca147f9e890c7cb6334028\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/libs/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ReentrancyGuardLib {\\n    error ReentrantCall();\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    struct Data {\\n        uint256 _status;\\n    }\\n\\n    function init(Data storage self) internal {\\n        self._status = _NOT_ENTERED;\\n    }\\n\\n    function enter(Data storage self) internal {\\n        if (self._status == _ENTERED) revert ReentrantCall();\\n        self._status = _ENTERED;\\n    }\\n\\n    function exit(Data storage self) internal {\\n        self._status = _NOT_ENTERED;\\n    }\\n\\n    function check(Data storage self) internal view returns (bool) {\\n        return self._status == _ENTERED;\\n    }\\n}\\n\\ncontract ReentrancyGuardExt {\\n    using ReentrancyGuardLib for ReentrancyGuardLib.Data;\\n\\n    modifier nonReentrant(ReentrancyGuardLib.Data storage self) {\\n        self.enter();\\n        _;\\n        self.exit();\\n    }\\n\\n    modifier nonReentrantView(ReentrancyGuardLib.Data storage self) {\\n        if (self.check()) revert ReentrancyGuardLib.ReentrantCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5b01eb0f7bcbf97f72b2192adebea04530b2aba0a6f3b445be58caed99ef2670\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10105446e709abf11b13721a516ffa24d3c5bec39c7925a367968a6a7519579f\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\n/// @title Library that implements address array on mapping, stores array length at 0 index.\\nlibrary AddressArray {\\n    error IndexOutOfBounds();\\n    error PopFromEmptyArray();\\n    error OutputArrayTooSmall();\\n\\n    /// @dev Data struct containing raw mapping.\\n    struct Data {\\n        mapping(uint256 => uint256) _raw;\\n    }\\n\\n    /// @dev Length of array.\\n    function length(Data storage self) internal view returns (uint256) {\\n        return self._raw[0] >> 160;\\n    }\\n\\n    /// @dev Returns data item from `self` storage at `i`.\\n    function at(Data storage self, uint256 i) internal view returns (address) {\\n        return address(uint160(self._raw[i]));\\n    }\\n\\n    /// @dev Returns list of addresses from storage `self`.\\n    function get(Data storage self) internal view returns (address[] memory arr) {\\n        uint256 lengthAndFirst = self._raw[0];\\n        arr = new address[](lengthAndFirst >> 160);\\n        _get(self, arr, lengthAndFirst);\\n    }\\n\\n    /// @dev Puts list of addresses from `self` storage into `output` array.\\n    function get(Data storage self, address[] memory output) internal view returns (address[] memory) {\\n        return _get(self, output, self._raw[0]);\\n    }\\n\\n    function _get(\\n        Data storage self,\\n        address[] memory output,\\n        uint256 lengthAndFirst\\n    ) private view returns (address[] memory) {\\n        uint256 len = lengthAndFirst >> 160;\\n        if (len > output.length) revert OutputArrayTooSmall();\\n        if (len > 0) {\\n            output[0] = address(uint160(lengthAndFirst));\\n            unchecked {\\n                for (uint256 i = 1; i < len; i++) {\\n                    output[i] = address(uint160(self._raw[i]));\\n                }\\n            }\\n        }\\n        return output;\\n    }\\n\\n    /// @dev Array push back `account` operation on storage `self`.\\n    function push(Data storage self, address account) internal returns (uint256) {\\n        unchecked {\\n            uint256 lengthAndFirst = self._raw[0];\\n            uint256 len = lengthAndFirst >> 160;\\n            if (len == 0) {\\n                self._raw[0] = (1 << 160) + uint160(account);\\n            } else {\\n                self._raw[0] = lengthAndFirst + (1 << 160);\\n                self._raw[len] = uint160(account);\\n            }\\n            return len + 1;\\n        }\\n    }\\n\\n    /// @dev Array pop back operation for storage `self`.\\n    function pop(Data storage self) internal {\\n        unchecked {\\n            uint256 lengthAndFirst = self._raw[0];\\n            uint256 len = lengthAndFirst >> 160;\\n            if (len == 0) revert PopFromEmptyArray();\\n            self._raw[len - 1] = 0;\\n            if (len > 1) {\\n                self._raw[0] = lengthAndFirst - (1 << 160);\\n            }\\n        }\\n    }\\n\\n    /// @dev Set element for storage `self` at `index` to `account`.\\n    function set(\\n        Data storage self,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        uint256 len = length(self);\\n        if (index >= len) revert IndexOutOfBounds();\\n\\n        if (index == 0) {\\n            self._raw[0] = (len << 160) | uint160(account);\\n        } else {\\n            self._raw[index] = uint160(account);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x721a3cbb8590214dc6cf6cacaabdb7b78b0e2de93cf308230eea800b546b2bff\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"./AddressArray.sol\\\";\\n\\n/** @title Library that is using AddressArray library for AddressArray.Data\\n * and allows Set operations on address storage data:\\n * 1. add\\n * 2. remove\\n * 3. contains\\n */\\nlibrary AddressSet {\\n    using AddressArray for AddressArray.Data;\\n\\n    /** @dev Data struct from AddressArray.Data items\\n     * and lookup mapping address => index in data array.\\n     */\\n    struct Data {\\n        AddressArray.Data items;\\n        mapping(address => uint256) lookup;\\n    }\\n\\n    /// @dev Length of data storage.\\n    function length(Data storage s) internal view returns (uint256) {\\n        return s.items.length();\\n    }\\n\\n    /// @dev Returns data item from `s` storage at `index`.\\n    function at(Data storage s, uint256 index) internal view returns (address) {\\n        return s.items.at(index);\\n    }\\n\\n    /// @dev Returns true if storage `s` has `item`.\\n    function contains(Data storage s, address item) internal view returns (bool) {\\n        return s.lookup[item] != 0;\\n    }\\n\\n    /// @dev Adds `item` into storage `s` and returns true if successful.\\n    function add(Data storage s, address item) internal returns (bool) {\\n        if (s.lookup[item] > 0) {\\n            return false;\\n        }\\n        s.lookup[item] = s.items.push(item);\\n        return true;\\n    }\\n\\n    /// @dev Removes `item` from storage `s` and returns true if successful.\\n    function remove(Data storage s, address item) internal returns (bool) {\\n        uint256 index = s.lookup[item];\\n        if (index == 0) {\\n            return false;\\n        }\\n        if (index < s.items.length()) {\\n            unchecked {\\n                address lastItem = s.items.at(s.items.length() - 1);\\n                s.items.set(index - 1, lastItem);\\n                s.lookup[lastItem] = index;\\n            }\\n        }\\n        s.items.pop();\\n        delete s.lookup[item];\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x06af71720083e9d8d3e7b9994695f6867e676a4fa89f1a8c294f5fce32b2da12\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x990c989e0ffba370a27b90b917a1cf86db79e370b9ba2b0f9076895b232744f8\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/// @title Implements efficient safe methods for ERC20 interface.\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev Allowance increase with safe math check.\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /// @dev Allowance decrease with safe math check.\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    /// @dev Calls either ERC20 or Dai `permit` for `token`, if unsuccessful forwards revert from external call.\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool) {\\n        if (permit.length == 32 * 7) {\\n            return _makeCalldataCall(token, IERC20Permit.permit.selector, permit);\\n        }\\n        if (permit.length == 32 * 8) {\\n            return _makeCalldataCall(token, IDaiLikePermit.permit.selector, permit);\\n        }\\n        revert SafePermitBadLength();\\n    }\\n\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function _makeCalldataCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        bytes calldata args\\n    ) private returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let len := add(4, args.length)\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            calldatacopy(add(data, 0x04), args.offset, args.length)\\n            success := call(gas(), token, 0, data, len, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x11014aec6238c642e58667a3ace2bb16a165bfe7bb475047c971bafdb1da92d0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/St1inch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/ERC20Pods.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/Pod.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\nimport \\\"./helpers/VotingPowerCalculator.sol\\\";\\nimport \\\"./interfaces/IVotable.sol\\\";\\n\\n/**\\n * @title 1inch staking contract\\n * @notice The contract provides the following features: staking, delegation, farming\\n * How lock period works:\\n * - balances and voting power\\n * - Lock min and max\\n * - Add lock\\n * - earlyWithdrawal\\n * - penalty math\\n */\\ncontract St1inch is ERC20Pods, Ownable, VotingPowerCalculator, IVotable {\\n    using SafeERC20 for IERC20;\\n\\n    event EmergencyExitSet(bool status);\\n    event MaxLossRatioSet(uint256 ratio);\\n    event MinLockPeriodRatioSet(uint256 ratio);\\n    event FeeReceiverSet(address receiver);\\n    event DefaultFarmSet(address defaultFarm);\\n\\n    error ApproveDisabled();\\n    error TransferDisabled();\\n    error LockTimeMoreMaxLock();\\n    error LockTimeLessMinLock();\\n    error UnlockTimeHasNotCome();\\n    error StakeUnlocked();\\n    error MinLockPeriodRatioNotReached();\\n    error MinReturnIsNotMet();\\n    error MaxLossIsNotMet();\\n    error MaxLossOverflow();\\n    error LossIsTooBig();\\n    error RescueAmountIsTooLarge();\\n    error ExpBaseTooBig();\\n    error ExpBaseTooSmall();\\n    error DefaultFarmTokenMismatch();\\n    error DepositsDisabled();\\n    error ZeroAddress();\\n\\n    /// @notice The minimum allowed staking period\\n    uint256 public constant MIN_LOCK_PERIOD = 30 days;\\n    /// @notice The maximum allowed staking period\\n    /// @dev WARNING: It is not enough to change the constant only but voting power decrease curve should be revised also\\n    uint256 public constant MAX_LOCK_PERIOD = 2 * 365 days;\\n    /// @notice Voting power decreased to 1/_VOTING_POWER_DIVIDER after lock expires\\n    /// @dev WARNING: It is not enough to change the constant only but voting power decrease curve should be revised also\\n    uint256 private constant _VOTING_POWER_DIVIDER = 20;\\n    uint256 private constant _PODS_LIMIT = 5;\\n    /// @notice Maximum allowed gas spent by each attached pod. If there not enough gas for pod execution then\\n    /// transaction is reverted. If pod uses more gas then its execution is reverted silently, not affection the\\n    /// main transaction\\n    uint256 private constant _POD_CALL_GAS_LIMIT = 500_000;\\n    uint256 private constant _ONE = 1e9;\\n\\n    IERC20 public immutable oneInch;\\n\\n    /// @notice The stucture to store stake information for a staker\\n    struct Depositor {\\n        uint40 lockTime;    // Unix time in seconds\\n        uint40 unlockTime;  // Unix time in seconds\\n        uint176 amount;     // Staked 1inch token amount\\n    }\\n\\n    mapping(address => Depositor) public depositors;\\n\\n    uint256 public totalDeposits;\\n    bool public emergencyExit;\\n    uint256 public maxLossRatio;\\n    uint256 public minLockPeriodRatio;\\n    address public feeReceiver;\\n    address public defaultFarm;\\n\\n    /**\\n     * @notice Initializes the contract\\n     * @param oneInch_ The token to be staked\\n     * @param expBase_ The rate for the voting power decrease over time\\n     */\\n    constructor(IERC20 oneInch_, uint256 expBase_)\\n        ERC20Pods(_PODS_LIMIT, _POD_CALL_GAS_LIMIT)\\n        ERC20(\\\"Staking 1INCH v2\\\", \\\"st1INCH\\\")\\n        VotingPowerCalculator(expBase_, block.timestamp)\\n    {\\n        // voting power after MAX_LOCK_PERIOD should be equal to staked amount divided by _VOTING_POWER_DIVIDER\\n        if (_votingPowerAt(1e18, block.timestamp + MAX_LOCK_PERIOD) * _VOTING_POWER_DIVIDER < 1e18) revert ExpBaseTooBig();\\n        if (_votingPowerAt(1e18, block.timestamp + MAX_LOCK_PERIOD + 1) * _VOTING_POWER_DIVIDER > 1e18) revert ExpBaseTooSmall();\\n        oneInch = oneInch_;\\n    }\\n\\n    /**\\n     * @notice Sets the new contract that would recieve early withdrawal fees\\n     * @param feeReceiver_ The receiver contract address\\n     */\\n    function setFeeReceiver(address feeReceiver_) external onlyOwner {\\n        if (feeReceiver_ == address(0)) revert ZeroAddress();\\n        feeReceiver = feeReceiver_;\\n        emit FeeReceiverSet(feeReceiver_);\\n    }\\n\\n    /**\\n     * @notice Sets the new farm that all staking users will automatically join after staking for reward farming\\n     * @param defaultFarm_ The farm contract address\\n     */\\n    function setDefaultFarm(address defaultFarm_) external onlyOwner {\\n        if (defaultFarm_ != address(0) && Pod(defaultFarm_).token() != this) revert DefaultFarmTokenMismatch();\\n        defaultFarm = defaultFarm_;\\n        emit DefaultFarmSet(defaultFarm_);\\n    }\\n\\n    /**\\n     * @notice Sets the maximum allowed loss ratio for early withdrawal. If the ratio is not met, actual is more than allowed,\\n     * then early withdrawal will revert.\\n     * Example: maxLossRatio = 90% and 1000 staked 1inch tokens means that a user can execute early withdrawal only\\n     * if his loss is less than or equals 90% of his stake, which is 900 tokens. Thus, if a user loses 900 tokens he is allowed\\n     * to do early withdrawal and not if the loss is greater.\\n     * @param maxLossRatio_ The maximum loss allowed (9 decimals).\\n     */\\n    function setMaxLossRatio(uint256 maxLossRatio_) external onlyOwner {\\n        if (maxLossRatio_ > _ONE) revert MaxLossOverflow();\\n        maxLossRatio = maxLossRatio_;\\n        emit MaxLossRatioSet(maxLossRatio_);\\n    }\\n\\n    /**\\n     * @notice Sets the minimum allowed lock period ratio for early withdrawal. If the ratio is not met, actual is more than allowed,\\n     * then early withdrawal will revert.\\n     * @param minLockPeriodRatio_ The maximum loss allowed (9 decimals).\\n     */\\n    function setMinLockPeriodRatio(uint256 minLockPeriodRatio_) external onlyOwner {\\n        if (minLockPeriodRatio_ > _ONE) revert MaxLossOverflow();\\n        minLockPeriodRatio = minLockPeriodRatio_;\\n        emit MinLockPeriodRatioSet(minLockPeriodRatio_);\\n    }\\n\\n    /**\\n     * @notice Sets the emergency exit mode. In emergency mode any stake may withdraw its stake regardless of lock.\\n     * The mode is intended to use only for migration to a new version of staking contract.\\n     * @param emergencyExit_ set `true` to enter emergency exit mode and `false` to return to normal operations\\n     */\\n    function setEmergencyExit(bool emergencyExit_) external onlyOwner {\\n        emergencyExit = emergencyExit_;\\n        emit EmergencyExitSet(emergencyExit_);\\n    }\\n\\n    /**\\n     * @notice Gets the voting power of the provided account\\n     * @param account The address of an account to get voting power for\\n     * @return votingPower The voting power available at the block timestamp\\n     */\\n    function votingPowerOf(address account) external view returns (uint256) {\\n        return _votingPowerAt(balanceOf(account), block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Gets the voting power of the provided account at the given timestamp\\n     * @dev To calculate voting power at any timestamp provided the contract stores each balance\\n     * as it was staked for the maximum lock time. If a staker locks its stake for less than the maximum\\n     * then at the moment of deposit its balance is recorded as it was staked for the maximum but time\\n     * equal to `max lock period-lock time` has passed. It makes available voting power calculation\\n     * available at any point in time within the maximum lock period.\\n     * @param account The address of an account to get voting power for\\n     * @param timestamp The timestamp to calculate voting power at\\n     * @return votingPower The voting power available at the moment of `timestamp`\\n     */\\n    function votingPowerOfAt(address account, uint256 timestamp) external view returns (uint256) {\\n        return _votingPowerAt(balanceOf(account), timestamp);\\n    }\\n\\n    /**\\n     * @notice Gets the voting power for the provided balance at the current timestamp assuming that\\n     * the balance is a balance at the moment of the maximum lock time\\n     * @param balance The balance for the maximum lock time\\n     * @return votingPower The voting power available at the block timestamp\\n     */\\n    function votingPower(uint256 balance) external view returns (uint256) {\\n        return _votingPowerAt(balance, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Gets the voting power for the provided balance at the current timestamp assuming that\\n     * the balance is a balance at the moment of the maximum lock time\\n     * @param balance The balance for the maximum lock time\\n     * @param timestamp The timestamp to calculate the voting power at\\n     * @return votingPower The voting power available at the block timestamp\\n     */\\n    function votingPowerAt(uint256 balance, uint256 timestamp) external view returns (uint256) {\\n        return _votingPowerAt(balance, timestamp);\\n    }\\n\\n    /**\\n     * @notice Stakes given amount and locks it for the given duration\\n     * @param amount The amount of tokens to stake\\n     * @param duration The lock period in seconds. If there is a stake locked then the lock period is extended by the duration.\\n     * To keep the current lock period unchanged pass 0 for the duration.\\n     */\\n    function deposit(uint256 amount, uint256 duration) external {\\n        _deposit(msg.sender, amount, duration);\\n    }\\n\\n    /**\\n     * @notice Stakes given amount and locks it for the given duration with permit\\n     * @param amount The amount of tokens to stake\\n     * @param duration The lock period in seconds. If there is a stake locked then the lock period is extended by the duration.\\n     * To keep the current lock period unchanged pass 0 for the duration\\n     * @param permit Permit given by the staker\\n     */\\n    function depositWithPermit(uint256 amount, uint256 duration, bytes calldata permit) external {\\n        oneInch.safePermit(permit);\\n        _deposit(msg.sender, amount, duration);\\n    }\\n\\n\\n    /**\\n     * @notice Stakes given amount on behalf of provided account without locking or extending lock\\n     * @param account The account to stake for\\n     * @param amount The amount to stake\\n     */\\n    function depositFor(address account, uint256 amount) external {\\n        _deposit(account, amount, 0);\\n    }\\n\\n    /**\\n     * @notice Stakes given amount on behalf of provided account without locking or extending lock with permit\\n     * @param account The account to stake for\\n     * @param amount The amount to stake\\n     * @param permit Permit given by the caller\\n     */\\n    function depositForWithPermit(address account, uint256 amount, bytes calldata permit) external {\\n        oneInch.safePermit(permit);\\n        _deposit(account, amount, 0);\\n    }\\n\\n    function _deposit(address account, uint256 amount, uint256 duration) private {\\n        if (emergencyExit) revert DepositsDisabled();\\n        Depositor memory depositor = depositors[account]; // SLOAD\\n\\n        uint256 lockedTill = Math.max(depositor.unlockTime, block.timestamp) + duration;\\n        uint256 lockLeft = lockedTill - block.timestamp;\\n        if (lockLeft < MIN_LOCK_PERIOD) revert LockTimeLessMinLock();\\n        if (lockLeft > MAX_LOCK_PERIOD) revert LockTimeMoreMaxLock();\\n        uint256 balanceDiff = _balanceAt(depositor.amount + amount, lockedTill) / _VOTING_POWER_DIVIDER - balanceOf(account);\\n\\n        depositor.lockTime = uint40(duration == 0 ? depositor.lockTime : block.timestamp);\\n        depositor.unlockTime = uint40(lockedTill);\\n        depositor.amount += uint176(amount);\\n        depositors[account] = depositor; // SSTORE\\n        totalDeposits += amount;\\n        _mint(account, balanceDiff);\\n\\n        if (amount > 0) {\\n            oneInch.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        if (defaultFarm != address(0) && !hasPod(account, defaultFarm)) {\\n            _addPod(account, defaultFarm);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw stake before lock period expires at the cost of losing part of a stake.\\n     * The stake loss is proportional to the time passed from the maximum lock period to the lock expiration and voting power.\\n     * The more time is passed the less would be the loss.\\n     * Formula to calculate return amount = (deposit - voting power)) / 0.95\\n     * @param minReturn The minumum amount of stake acceptable for return. If actual amount is less then the transaction is reverted\\n     * @param maxLoss The maximum amount of loss acceptable. If actual loss is bigger then the transaction is reverted\\n     */\\n    function earlyWithdraw(uint256 minReturn, uint256 maxLoss) external {\\n        earlyWithdrawTo(msg.sender, minReturn, maxLoss);\\n    }\\n\\n    /**\\n     * @notice Withdraw stake before lock period expires at the cost of losing part of a stake to the specified account\\n     * The stake loss is proportional to the time passed from the maximum lock period to the lock expiration and voting power.\\n     * The more time is passed the less would be the loss.\\n     * Formula to calculate return amount = (deposit - voting power)) / 0.95\\n     * @param to The account to withdraw the stake to\\n     * @param minReturn The minumum amount of stake acceptable for return. If actual amount is less then the transaction is reverted\\n     * @param maxLoss The maximum amount of loss acceptable. If actual loss is bigger then the transaction is reverted\\n     */\\n    // ret(balance) = (deposit - vp(balance)) / 0.95\\n    function earlyWithdrawTo(address to, uint256 minReturn, uint256 maxLoss) public {\\n        Depositor memory depositor = depositors[msg.sender]; // SLOAD\\n        if (emergencyExit || block.timestamp >= depositor.unlockTime) revert StakeUnlocked();\\n        uint256 allowedExitTime = depositor.lockTime + (depositor.unlockTime - depositor.lockTime) * minLockPeriodRatio / _ONE;\\n        if (block.timestamp < allowedExitTime) revert MinLockPeriodRatioNotReached();\\n\\n        uint256 amount = depositor.amount;\\n        if (amount > 0) {\\n            uint256 balance = balanceOf(msg.sender);\\n            (uint256 loss, uint256 ret) = _earlyWithdrawLoss(amount, balance);\\n            if (ret < minReturn) revert MinReturnIsNotMet();\\n            if (loss > maxLoss) revert MaxLossIsNotMet();\\n            if (loss > amount * maxLossRatio / _ONE) revert LossIsTooBig();\\n\\n            _withdraw(depositor, balance);\\n            oneInch.safeTransfer(to, ret);\\n            oneInch.safeTransfer(feeReceiver, loss);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the loss amount if the staker do early withdrawal at the current block\\n     * @param account The account to calculate early withdrawal loss for\\n     * @return loss The loss amount amount\\n     * @return ret The return amount\\n     * @return canWithdraw  True if the staker can withdraw without penalty, false otherwise\\n     */\\n    function earlyWithdrawLoss(address account) external view returns (uint256 loss, uint256 ret, bool canWithdraw) {\\n        uint256 amount = depositors[account].amount;\\n        (loss, ret) = _earlyWithdrawLoss(amount, balanceOf(account));\\n        canWithdraw = loss <= amount * maxLossRatio / _ONE;\\n    }\\n\\n    function _earlyWithdrawLoss(uint256 depAmount, uint256 stBalance) private view returns (uint256 loss, uint256 ret) {\\n        ret = (depAmount - _votingPowerAt(stBalance, block.timestamp)) * 100 / 95;\\n        loss = depAmount - ret;\\n    }\\n\\n    /**\\n     * @notice Withdraws stake if lock period expired\\n     */\\n    function withdraw() external {\\n        withdrawTo(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraws stake if lock period expired to the given address\\n     */\\n    function withdrawTo(address to) public {\\n        Depositor memory depositor = depositors[msg.sender]; // SLOAD\\n        if (!emergencyExit && block.timestamp < depositor.unlockTime) revert UnlockTimeHasNotCome();\\n\\n        uint256 amount = depositor.amount;\\n        if (amount > 0) {\\n            _withdraw(depositor, balanceOf(msg.sender));\\n            oneInch.safeTransfer(to, amount);\\n        }\\n    }\\n\\n    function _withdraw(Depositor memory depositor, uint256 balance) private {\\n        totalDeposits -= depositor.amount;\\n        depositor.amount = 0;\\n        // keep unlockTime in storage for next tx optimization\\n        depositor.unlockTime = uint40(Math.min(depositor.unlockTime, block.timestamp));\\n        depositors[msg.sender] = depositor; // SSTORE\\n        _burn(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @notice Retrieves funds from the contract in emergency situations\\n     * @param token The token to retrieve\\n     * @param amount The amount of funds to transfer\\n     */\\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\\n        if (address(token) == address(0)) {\\n            Address.sendValue(payable(msg.sender), amount);\\n        } else {\\n            if (token == oneInch) {\\n                if (amount > oneInch.balanceOf(address(this)) - totalDeposits) revert RescueAmountIsTooLarge();\\n            }\\n            token.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    // ERC20 methods disablers\\n\\n    function approve(address, uint256) public pure override(IERC20, ERC20) returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function transfer(address, uint256) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function transferFrom(address, address, uint256) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function increaseAllowance(address, uint256) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function decreaseAllowance(address, uint256) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n}\\n\",\"keccak256\":\"0xf943f1bb30f32caea79e36a922d0bd78595027ef501bc0aa42de033ddfa47c51\",\"license\":\"MIT\"},\"contracts/helpers/St1inchPreview.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./VotingPowerCalculator.sol\\\";\\nimport \\\"../St1inch.sol\\\";\\n\\ncontract St1inchPreview is VotingPowerCalculator, Ownable {\\n    St1inch public immutable st1INCH;\\n    uint256 private constant _VOTING_POWER_DIVIDER = 20;\\n    uint256 private constant _ONE = 1e9;\\n    uint256 public durationUntilMaxAllowedLoss;  // log(0.95 * maxAllowedLoss + 0.05) / log(baseExp)\\n\\n    constructor(St1inch st1INCH_) VotingPowerCalculator(st1INCH_.expBase(), st1INCH_.origin()) {\\n        st1INCH = st1INCH_;\\n    }\\n\\n    function previewBalance(address account, uint256 amount, uint256 duration) external view returns (uint256) {\\n        (, uint40 unlockTime, uint176 balance) = st1INCH.depositors(account);\\n        uint256 lockedTill = Math.max(unlockTime, block.timestamp) + duration;\\n        return _balanceAt(balance + amount, lockedTill) / _VOTING_POWER_DIVIDER;\\n    }\\n\\n    function previewPowerOf(address account, uint256 amount, uint256 duration) external view returns (uint256) {\\n        return previewPowerOfAtTime(account, amount, duration, block.timestamp);\\n    }\\n\\n    function previewPowerOfAtTime(address account, uint256 amount, uint256 duration, uint256 timestamp) public view returns (uint256) {\\n        (, uint40 unlockTime, uint176 balance) = st1INCH.depositors(account);\\n        uint256 lockedTill = Math.max(unlockTime, block.timestamp) + duration;\\n        return _votingPowerAt(_balanceAt(balance + amount, lockedTill) / _VOTING_POWER_DIVIDER, timestamp);\\n    }\\n\\n    function previewUnlockTime(address account) public view returns (uint256 allowedExitTime) {\\n        (uint40 lockTime, uint40 unlockTime,) = st1INCH.depositors(account);\\n        allowedExitTime = lockTime + (unlockTime - lockTime) * st1INCH.minLockPeriodRatio() / _ONE;\\n        allowedExitTime = Math.max(allowedExitTime, unlockTime - 730 days + durationUntilMaxAllowedLoss);\\n    }\\n\\n    function setDurationUntilMaxAllowedLoss(uint256 duration) external onlyOwner {\\n        durationUntilMaxAllowedLoss = duration;\\n    }\\n}\\n\",\"keccak256\":\"0xee178e593e9fb02597c01ce64e712d911d40f44dca22786d42588cb831d61f61\",\"license\":\"MIT\"},\"contracts/helpers/VotingPowerCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ncontract VotingPowerCalculator {\\n    error OriginInTheFuture();\\n\\n    uint256 private constant _ONE = 1e18;\\n\\n    uint256 public immutable origin;\\n    uint256 public immutable expBase;\\n\\n    uint256 private immutable _expTable0;\\n    uint256 private immutable _expTable1;\\n    uint256 private immutable _expTable2;\\n    uint256 private immutable _expTable3;\\n    uint256 private immutable _expTable4;\\n    uint256 private immutable _expTable5;\\n    uint256 private immutable _expTable6;\\n    uint256 private immutable _expTable7;\\n    uint256 private immutable _expTable8;\\n    uint256 private immutable _expTable9;\\n    uint256 private immutable _expTable10;\\n    uint256 private immutable _expTable11;\\n    uint256 private immutable _expTable12;\\n    uint256 private immutable _expTable13;\\n    uint256 private immutable _expTable14;\\n    uint256 private immutable _expTable15;\\n    uint256 private immutable _expTable16;\\n    uint256 private immutable _expTable17;\\n    uint256 private immutable _expTable18;\\n    uint256 private immutable _expTable19;\\n    uint256 private immutable _expTable20;\\n    uint256 private immutable _expTable21;\\n    uint256 private immutable _expTable22;\\n    uint256 private immutable _expTable23;\\n    uint256 private immutable _expTable24;\\n    uint256 private immutable _expTable25;\\n    uint256 private immutable _expTable26;\\n    uint256 private immutable _expTable27;\\n    uint256 private immutable _expTable28;\\n    uint256 private immutable _expTable29;\\n\\n    constructor(uint256 expBase_, uint256 origin_) {\\n        if (origin_ > block.timestamp) revert OriginInTheFuture();\\n\\n        origin = origin_;\\n        expBase = expBase_;\\n        _expTable0 = expBase_;\\n        _expTable1 = (_expTable0 * _expTable0) / _ONE;\\n        _expTable2 = (_expTable1 * _expTable1) / _ONE;\\n        _expTable3 = (_expTable2 * _expTable2) / _ONE;\\n        _expTable4 = (_expTable3 * _expTable3) / _ONE;\\n        _expTable5 = (_expTable4 * _expTable4) / _ONE;\\n        _expTable6 = (_expTable5 * _expTable5) / _ONE;\\n        _expTable7 = (_expTable6 * _expTable6) / _ONE;\\n        _expTable8 = (_expTable7 * _expTable7) / _ONE;\\n        _expTable9 = (_expTable8 * _expTable8) / _ONE;\\n        _expTable10 = (_expTable9 * _expTable9) / _ONE;\\n        _expTable11 = (_expTable10 * _expTable10) / _ONE;\\n        _expTable12 = (_expTable11 * _expTable11) / _ONE;\\n        _expTable13 = (_expTable12 * _expTable12) / _ONE;\\n        _expTable14 = (_expTable13 * _expTable13) / _ONE;\\n        _expTable15 = (_expTable14 * _expTable14) / _ONE;\\n        _expTable16 = (_expTable15 * _expTable15) / _ONE;\\n        _expTable17 = (_expTable16 * _expTable16) / _ONE;\\n        _expTable18 = (_expTable17 * _expTable17) / _ONE;\\n        _expTable19 = (_expTable18 * _expTable18) / _ONE;\\n        _expTable20 = (_expTable19 * _expTable19) / _ONE;\\n        _expTable21 = (_expTable20 * _expTable20) / _ONE;\\n        _expTable22 = (_expTable21 * _expTable21) / _ONE;\\n        _expTable23 = (_expTable22 * _expTable22) / _ONE;\\n        _expTable24 = (_expTable23 * _expTable23) / _ONE;\\n        _expTable25 = (_expTable24 * _expTable24) / _ONE;\\n        _expTable26 = (_expTable25 * _expTable25) / _ONE;\\n        _expTable27 = (_expTable26 * _expTable26) / _ONE;\\n        _expTable28 = (_expTable27 * _expTable27) / _ONE;\\n        _expTable29 = (_expTable28 * _expTable28) / _ONE;\\n    }\\n\\n    function _votingPowerAt(uint256 balance, uint256 timestamp) internal view returns (uint256 votingPower) {\\n        timestamp = timestamp < origin ? origin : timestamp;  // logic in timestamps before origin is undefined\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            votingPower = balance;\\n            if (t & 0x01 != 0) {\\n                votingPower = (votingPower * _expTable0) / _ONE;\\n            }\\n            if (t & 0x02 != 0) {\\n                votingPower = (votingPower * _expTable1) / _ONE;\\n            }\\n            if (t & 0x04 != 0) {\\n                votingPower = (votingPower * _expTable2) / _ONE;\\n            }\\n            if (t & 0x08 != 0) {\\n                votingPower = (votingPower * _expTable3) / _ONE;\\n            }\\n            if (t & 0x10 != 0) {\\n                votingPower = (votingPower * _expTable4) / _ONE;\\n            }\\n            if (t & 0x20 != 0) {\\n                votingPower = (votingPower * _expTable5) / _ONE;\\n            }\\n            if (t & 0x40 != 0) {\\n                votingPower = (votingPower * _expTable6) / _ONE;\\n            }\\n            if (t & 0x80 != 0) {\\n                votingPower = (votingPower * _expTable7) / _ONE;\\n            }\\n            if (t & 0x100 != 0) {\\n                votingPower = (votingPower * _expTable8) / _ONE;\\n            }\\n            if (t & 0x200 != 0) {\\n                votingPower = (votingPower * _expTable9) / _ONE;\\n            }\\n            if (t & 0x400 != 0) {\\n                votingPower = (votingPower * _expTable10) / _ONE;\\n            }\\n            if (t & 0x800 != 0) {\\n                votingPower = (votingPower * _expTable11) / _ONE;\\n            }\\n            if (t & 0x1000 != 0) {\\n                votingPower = (votingPower * _expTable12) / _ONE;\\n            }\\n            if (t & 0x2000 != 0) {\\n                votingPower = (votingPower * _expTable13) / _ONE;\\n            }\\n            if (t & 0x4000 != 0) {\\n                votingPower = (votingPower * _expTable14) / _ONE;\\n            }\\n            if (t & 0x8000 != 0) {\\n                votingPower = (votingPower * _expTable15) / _ONE;\\n            }\\n            if (t & 0x10000 != 0) {\\n                votingPower = (votingPower * _expTable16) / _ONE;\\n            }\\n            if (t & 0x20000 != 0) {\\n                votingPower = (votingPower * _expTable17) / _ONE;\\n            }\\n            if (t & 0x40000 != 0) {\\n                votingPower = (votingPower * _expTable18) / _ONE;\\n            }\\n            if (t & 0x80000 != 0) {\\n                votingPower = (votingPower * _expTable19) / _ONE;\\n            }\\n            if (t & 0x100000 != 0) {\\n                votingPower = (votingPower * _expTable20) / _ONE;\\n            }\\n            if (t & 0x200000 != 0) {\\n                votingPower = (votingPower * _expTable21) / _ONE;\\n            }\\n            if (t & 0x400000 != 0) {\\n                votingPower = (votingPower * _expTable22) / _ONE;\\n            }\\n            if (t & 0x800000 != 0) {\\n                votingPower = (votingPower * _expTable23) / _ONE;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                votingPower = (votingPower * _expTable24) / _ONE;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                votingPower = (votingPower * _expTable25) / _ONE;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                votingPower = (votingPower * _expTable26) / _ONE;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                votingPower = (votingPower * _expTable27) / _ONE;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                votingPower = (votingPower * _expTable28) / _ONE;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                votingPower = (votingPower * _expTable29) / _ONE;\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function _balanceAt(uint256 votingPower, uint256 timestamp) internal view returns (uint256 balance) {\\n        timestamp = timestamp < origin ? origin : timestamp;  // logic in timestamps before origin is undefined\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            balance = votingPower;\\n            if (t & 0x01 != 0) {\\n                balance = (balance * _ONE) / _expTable0;\\n            }\\n            if (t & 0x02 != 0) {\\n                balance = (balance * _ONE) / _expTable1;\\n            }\\n            if (t & 0x04 != 0) {\\n                balance = (balance * _ONE) / _expTable2;\\n            }\\n            if (t & 0x08 != 0) {\\n                balance = (balance * _ONE) / _expTable3;\\n            }\\n            if (t & 0x10 != 0) {\\n                balance = (balance * _ONE) / _expTable4;\\n            }\\n            if (t & 0x20 != 0) {\\n                balance = (balance * _ONE) / _expTable5;\\n            }\\n            if (t & 0x40 != 0) {\\n                balance = (balance * _ONE) / _expTable6;\\n            }\\n            if (t & 0x80 != 0) {\\n                balance = (balance * _ONE) / _expTable7;\\n            }\\n            if (t & 0x100 != 0) {\\n                balance = (balance * _ONE) / _expTable8;\\n            }\\n            if (t & 0x200 != 0) {\\n                balance = (balance * _ONE) / _expTable9;\\n            }\\n            if (t & 0x400 != 0) {\\n                balance = (balance * _ONE) / _expTable10;\\n            }\\n            if (t & 0x800 != 0) {\\n                balance = (balance * _ONE) / _expTable11;\\n            }\\n            if (t & 0x1000 != 0) {\\n                balance = (balance * _ONE) / _expTable12;\\n            }\\n            if (t & 0x2000 != 0) {\\n                balance = (balance * _ONE) / _expTable13;\\n            }\\n            if (t & 0x4000 != 0) {\\n                balance = (balance * _ONE) / _expTable14;\\n            }\\n            if (t & 0x8000 != 0) {\\n                balance = (balance * _ONE) / _expTable15;\\n            }\\n            if (t & 0x10000 != 0) {\\n                balance = (balance * _ONE) / _expTable16;\\n            }\\n            if (t & 0x20000 != 0) {\\n                balance = (balance * _ONE) / _expTable17;\\n            }\\n            if (t & 0x40000 != 0) {\\n                balance = (balance * _ONE) / _expTable18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                balance = (balance * _ONE) / _expTable19;\\n            }\\n            if (t & 0x100000 != 0) {\\n                balance = (balance * _ONE) / _expTable20;\\n            }\\n            if (t & 0x200000 != 0) {\\n                balance = (balance * _ONE) / _expTable21;\\n            }\\n            if (t & 0x400000 != 0) {\\n                balance = (balance * _ONE) / _expTable22;\\n            }\\n            if (t & 0x800000 != 0) {\\n                balance = (balance * _ONE) / _expTable23;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                balance = (balance * _ONE) / _expTable24;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                balance = (balance * _ONE) / _expTable25;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                balance = (balance * _ONE) / _expTable26;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                balance = (balance * _ONE) / _expTable27;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                balance = (balance * _ONE) / _expTable28;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                balance = (balance * _ONE) / _expTable29;\\n            }\\n        }\\n        return balance;\\n    }\\n}\\n\",\"keccak256\":\"0x6f21d9315cc46a7ca6619fdd98c170f04e9fe4e7e05a02880df13dfd8aec57cb\",\"license\":\"MIT\"},\"contracts/interfaces/IVotable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVotable is IERC20 {\\n    /// @dev we assume that voting power is a function of balance that preserves order\\n    function votingPowerOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d7bd805a3d022454412a535bfd849b9e364548e77a82fffcd06590681d3d2e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6104a06040523480156200001257600080fd5b506040516200241a3803806200241a833981016040819052620000359162000625565b806001600160a01b031663bca9c3fc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200009a919062000657565b816001600160a01b031663938b5f326040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ff919062000657565b428111156200012157604051635a59719b60e01b815260040160405180910390fd5b608081905260a082905260c0829052670de0b6b3a764000062000145838062000671565b6200015191906200069d565b60e0819052670de0b6b3a7640000906200016c908062000671565b6200017891906200069d565b610100819052670de0b6b3a76400009062000194908062000671565b620001a091906200069d565b610120819052670de0b6b3a764000090620001bc908062000671565b620001c891906200069d565b610140819052670de0b6b3a764000090620001e4908062000671565b620001f091906200069d565b610160819052670de0b6b3a7640000906200020c908062000671565b6200021891906200069d565b610180819052670de0b6b3a76400009062000234908062000671565b6200024091906200069d565b6101a0819052670de0b6b3a7640000906200025c908062000671565b6200026891906200069d565b6101c0819052670de0b6b3a76400009062000284908062000671565b6200029091906200069d565b6101e0819052670de0b6b3a764000090620002ac908062000671565b620002b891906200069d565b610200819052670de0b6b3a764000090620002d4908062000671565b620002e091906200069d565b610220819052670de0b6b3a764000090620002fc908062000671565b6200030891906200069d565b610240819052670de0b6b3a76400009062000324908062000671565b6200033091906200069d565b610260819052670de0b6b3a7640000906200034c908062000671565b6200035891906200069d565b610280819052670de0b6b3a76400009062000374908062000671565b6200038091906200069d565b6102a0819052670de0b6b3a7640000906200039c908062000671565b620003a891906200069d565b6102c0819052670de0b6b3a764000090620003c4908062000671565b620003d091906200069d565b6102e0819052670de0b6b3a764000090620003ec908062000671565b620003f891906200069d565b610300819052670de0b6b3a76400009062000414908062000671565b6200042091906200069d565b610320819052670de0b6b3a7640000906200043c908062000671565b6200044891906200069d565b610340819052670de0b6b3a76400009062000464908062000671565b6200047091906200069d565b610360819052670de0b6b3a7640000906200048c908062000671565b6200049891906200069d565b610380819052670de0b6b3a764000090620004b4908062000671565b620004c091906200069d565b6103a0819052670de0b6b3a764000090620004dc908062000671565b620004e891906200069d565b6103c0819052670de0b6b3a76400009062000504908062000671565b6200051091906200069d565b6103e0819052670de0b6b3a7640000906200052c908062000671565b6200053891906200069d565b610400819052670de0b6b3a76400009062000554908062000671565b6200056091906200069d565b610420819052670de0b6b3a7640000906200057c908062000671565b6200058891906200069d565b610440819052670de0b6b3a764000090620005a4908062000671565b620005b091906200069d565b6104605250620005c2905033620005d5565b6001600160a01b031661048052620006c0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200063857600080fd5b81516001600160a01b03811681146200065057600080fd5b9392505050565b6000602082840312156200066a57600080fd5b5051919050565b80820281158282048414176200069757634e487b7160e01b600052601160045260246000fd5b92915050565b600082620006bb57634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e0516104005161042051610440516104605161048051611ac9620009516000396000818161020301528181610271015281816102ea01528181610430015261056e015260008181610fcf015261173d015260008181610f860152611701015260008181610f3d01526116c5015260008181610ef40152611689015260008181610eab015261164d015260008181610e620152611611015260008181610e1901526115d5015260008181610dd1015261159a015260008181610d89015261155f015260008181610d410152611524015260008181610cf901526114e9015260008181610cb101526114ae015260008181610c690152611473015260008181610c210152611438015260008181610bd901526113fd015260008181610b9201526113c3015260008181610b4b0152611389015260008181610b04015261134f015260008181610abd0152611315015260008181610a7601526112db015260008181610a2f01526112a10152600081816109e801526112670152600081816109a1015261122d01526000818161095b01526111f401526000818161091501526111bb0152600081816108cf0152611182015260008181610889015261114901526000818161084301526111100152600081816107fd01526110d70152600081816107b7015261109e015260006101b601526000818161017c01528181610737015281816107640152818161078b015281816110150152818161104201526110690152611ac96000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063938b5f3211610081578063de91dd581161005b578063de91dd58146101d8578063f2fde38b146101eb578063ff512cd2146101fe57600080fd5b8063938b5f3214610177578063bbca1c8d1461019e578063bca9c3fc146101b157600080fd5b8063715018a6116100b2578063715018a61461011b57806379f29ded146101255780638da5cb5b1461013857600080fd5b806323393a70146100d9578063371d1a22146100f55780634e8d040f14610108575b600080fd5b6100e260015481565b6040519081526020015b60405180910390f35b6100e2610103366004611882565b610225565b6100e261011636600461189d565b6103e4565b61012361050e565b005b6100e26101333660046118d6565b610522565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ec565b6100e27f000000000000000000000000000000000000000000000000000000000000000081565b6100e26101ac3660046118d6565b610642565b6100e27f000000000000000000000000000000000000000000000000000000000000000081565b6101236101e6366004611909565b610650565b6101236101f9366004611882565b61065d565b6101527f000000000000000000000000000000000000000000000000000000000000000081565b6040517feed75f6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063eed75f6d90602401606060405180830381865afa1580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de9190611937565b5091509150633b9aca007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e6e10df6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190611999565b61038184846119e1565b64ffffffffff1661039291906119ff565b61039c9190611a45565b6103ad9064ffffffffff8416611a80565b92506103dc836001546303c26700846103c691906119e1565b64ffffffffff166103d79190611a80565b610719565b949350505050565b6040517feed75f6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063eed75f6d90602401606060405180830381865afa158015610479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049d9190611937565b92509250506000856104b68464ffffffffff1642610719565b6104c09190611a80565b905061050260146104f26104ec8a75ffffffffffffffffffffffffffffffffffffffffffff8716611a80565b84610733565b6104fc9190611a45565b86611011565b98975050505050505050565b610516611763565b61052060006117e4565b565b6040517feed75f6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063eed75f6d90602401606060405180830381865afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db9190611937565b92509250506000846105f48464ffffffffff1642610719565b6105fe9190611a80565b9050601461062d6106278875ffffffffffffffffffffffffffffffffffffffffffff8616611a80565b83610733565b6106379190611a45565b979650505050505050565b60006103dc848484426103e4565b610658611763565b600155565b610665611763565b73ffffffffffffffffffffffffffffffffffffffff811661070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610716816117e4565b50565b6000818311610728578161072a565b825b90505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000082106107625781610784565b7f00000000000000000000000000000000000000000000000000000000000000005b91508290507f0000000000000000000000000000000000000000000000000000000000000000820360018116156107f2577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400008302816107ee576107ee611a16565b0491505b6002811615610838577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000083028161083457610834611a16565b0491505b600481161561087e577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000083028161087a5761087a611a16565b0491505b60088116156108c4577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400008302816108c0576108c0611a16565b0491505b601081161561090a577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000083028161090657610906611a16565b0491505b6020811615610950577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000083028161094c5761094c611a16565b0491505b6040811615610996577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000083028161099257610992611a16565b0491505b60808116156109dc577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400008302816109d8576109d8611a16565b0491505b610100811615610a23577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610a1f57610a1f611a16565b0491505b610200811615610a6a577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610a6657610a66611a16565b0491505b610400811615610ab1577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610aad57610aad611a16565b0491505b610800811615610af8577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610af457610af4611a16565b0491505b611000811615610b3f577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610b3b57610b3b611a16565b0491505b612000811615610b86577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610b8257610b82611a16565b0491505b614000811615610bcd577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610bc957610bc9611a16565b0491505b618000811615610c14577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610c1057610c10611a16565b0491505b62010000811615610c5c577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610c5857610c58611a16565b0491505b62020000811615610ca4577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610ca057610ca0611a16565b0491505b62040000811615610cec577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610ce857610ce8611a16565b0491505b62080000811615610d34577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610d3057610d30611a16565b0491505b62100000811615610d7c577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610d7857610d78611a16565b0491505b62200000811615610dc4577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610dc057610dc0611a16565b0491505b62400000811615610e0c577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610e0857610e08611a16565b0491505b62800000811615610e54577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610e5057610e50611a16565b0491505b6301000000811615610e9d577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610e9957610e99611a16565b0491505b6302000000811615610ee6577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610ee257610ee2611a16565b0491505b6304000000811615610f2f577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610f2b57610f2b611a16565b0491505b6308000000811615610f78577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610f7457610f74611a16565b0491505b6310000000811615610fc1577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000830281610fbd57610fbd611a16565b0491505b632000000081161561100a577f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000083028161100657611006611a16565b0491505b5092915050565b60007f000000000000000000000000000000000000000000000000000000000000000082106110405781611062565b7f00000000000000000000000000000000000000000000000000000000000000005b91508290507f0000000000000000000000000000000000000000000000000000000000000000820360018116156110c357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b60028116156110fc57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600481161561113557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600881161561116e57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b60108116156111a757670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b60208116156111e057670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b604081161561121957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b608081161561125257670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b61010081161561128c57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6102008116156112c657670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b61040081161561130057670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b61080081161561133a57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b61100081161561137457670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6120008116156113ae57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6140008116156113e857670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b61800081161561142257670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6201000081161561145d57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6202000081161561149857670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620400008116156114d357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6208000081161561150e57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6210000081161561154957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6220000081161561158457670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b624000008116156115bf57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b628000008116156115fa57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b630100000081161561163657670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b630200000081161561167257670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63040000008116156116ae57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63080000008116156116ea57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b631000000081161561172657670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b632000000081161561100a57670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000008302611006565b60005473ffffffffffffffffffffffffffffffffffffffff163314610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610704565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461187d57600080fd5b919050565b60006020828403121561189457600080fd5b61072a82611859565b600080600080608085870312156118b357600080fd5b6118bc85611859565b966020860135965060408601359560600135945092505050565b6000806000606084860312156118eb57600080fd5b6118f484611859565b95602085013595506040909401359392505050565b60006020828403121561191b57600080fd5b5035919050565b805164ffffffffff8116811461187d57600080fd5b60008060006060848603121561194c57600080fd5b61195584611922565b925061196360208501611922565b9150604084015175ffffffffffffffffffffffffffffffffffffffffffff8116811461198e57600080fd5b809150509250925092565b6000602082840312156119ab57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b64ffffffffff82811682821603908082111561100a5761100a6119b2565b808202811582820484141761072d5761072d6119b2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611a7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8082018082111561072d5761072d6119b256fea2646970667358221220baeb8531edd4624d29641fa320dbb686d3dd0418a18ded7ff639b2bda42e59ef64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1786,
        "contract": "contracts/helpers/St1inchPreview.sol:St1inchPreview",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4936,
        "contract": "contracts/helpers/St1inchPreview.sol:St1inchPreview",
        "label": "durationUntilMaxAllowedLoss",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
